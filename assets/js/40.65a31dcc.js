(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{435:function(t,e,a){"use strict";a.r(e);var s=a(42),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"actuators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actuators"}},[t._v("#")]),t._v(" Actuators")]),t._v(" "),a("h2",{attrs:{id:"on-off"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#on-off"}},[t._v("#")]),t._v(" ON OFF")]),t._v(" "),a("p",[t._v("This module enables to actuate things by giving to a PIN a HIGH or LOW value corresponding to an MQTT topic.\nExample usage: Connect a transistor to power a relay, connect a led...")]),t._v(" "),a("p",[t._v("So as to pilot the GPIO use the following commands with "),a("RouterLink",{attrs:{to:"/upload/pio.html#api"}},[t._v("simple receiving")]),t._v(":")],1),t._v(" "),a("p",[t._v("OFF command:\n"),a("code",[t._v("mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoONOFF/setOFF -m 15")])]),t._v(" "),a("p",[t._v("ON command:\n"),a("code",[t._v("mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoONOFF/setON -m 15")])]),t._v(" "),a("p",[t._v("or with "),a("RouterLink",{attrs:{to:"/upload/pio.html#api"}},[t._v("json receiving")])],1),t._v(" "),a("p",[t._v("OFF command:\n"),a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoONOFF -m \'{"gpio":15,"cmd":0}\'')])]),t._v(" "),a("p",[t._v("ON command:\n"),a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoONOFF -m \'{"gpio":15,"cmd":1}\'')])]),t._v(" "),a("h2",{attrs:{id:"fastled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fastled"}},[t._v("#")]),t._v(" FASTLED")]),t._v(" "),a("h3",{attrs:{id:"the-fastled-module-support-2-different-operation-modes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-fastled-module-support-2-different-operation-modes"}},[t._v("#")]),t._v(" The FASTLED module support 2 different operation modes")]),t._v(" "),a("ol",[a("li",[t._v("control one specific RGB LED")])]),t._v(" "),a("ul",[a("li",[t._v("Set color")]),t._v(" "),a("li",[t._v("Set blink")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Start fire animation (Fire2012)")])]),t._v(" "),a("h3",{attrs:{id:"hardware-wiring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hardware-wiring"}},[t._v("#")]),t._v(" Hardware wiring")]),t._v(" "),a("p",[t._v("Theoretically it should be possible to use every free IO pin. But after some tests only pin D2 works at WEMOS D1. Other platforms can work.\nThe default setting use NEOPIXEL (WS2812B). The simplest wiring is direct connect D2 to data pin of LED stripe and connect VCC/GND to power source. You should also add an capacitor.")]),t._v(" "),a("h2",{attrs:{id:"pwm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwm"}},[t._v("#")]),t._v(" PWM")]),t._v(" "),a("p",[t._v("This module allows control over PWM outputs.\nIt's primary use is for controlling LEDs, but it should be equally at home controlling anything that's controlled using PWM.\nE.g. LEDs, servos, PC fans.\nYou would typically connect a PWM output to a transistor or MOSFET to allow control over higher power devices.")]),t._v(" "),a("ul",[a("li",[t._v("JSON message format allows you to set any or all channels in a single message.")]),t._v(" "),a("li",[t._v("Each channel can be set to smoothly transition from its current setting to the new setting over a specified number of seconds.")]),t._v(" "),a("li",[t._v("Each channel can be calibrated with min and max settings, as well as a gamma curve.")])]),t._v(" "),a("h3",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("p",[t._v("In order to use the PWM actuator, you need to configure which pins the PWM output channels will be connected to.\nThere are a couple of "),a("code",[t._v("#define")]),t._v("s that achieve this.\nThey can be defined in the "),a("code",[t._v("build_flags")]),t._v(" section of the env, or by directly editing "),a("code",[t._v("config_PWM.h")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("PWM_CHANNEL_NAMES "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"g"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w0"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w1"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("PWM_CHANNEL_PINS  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("code",[t._v("PWM_CHANNEL_NAMES")]),t._v(" lists the names that you would like to assign to each channel, and determines the number of channels.\n"),a("code",[t._v("PWM_CHANNEL_PINS")]),t._v(" lists the corresponding output pins that the channels will be connected to.\nThe number of entries in "),a("code",[t._v("PWM_CHANNEL_PINS")]),t._v(" must exactly match the number of entries in "),a("code",[t._v("PWM_CHANNEL_NAMES")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("h4",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoPWM/set -m \'{"r":0.5,"g":0.2,"b":1,"fade":10.0}\'')])]),t._v(" "),a("p",[t._v("This example sets new values for the channels named "),a("code",[t._v("r")]),t._v(", "),a("code",[t._v("g")]),t._v(", and "),a("code",[t._v("b")]),t._v(".\nThese channels will transition from their current values to the new values over 10s.")]),t._v(" "),a("h4",{attrs:{id:"calibrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calibrate"}},[t._v("#")]),t._v(" Calibrate")]),t._v(" "),a("p",[t._v("Calibration allows that min and max levels to be configured for each channel, so that the full 0-1 range of values\nthat can be specified with the "),a("code",[t._v("set")]),t._v(" command actually do things.")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_MEGA/commands/MQTTtoPWM/calibrate -m \'{"min-r":0.01,"max-r":1.0,"gamma-r":2.5}\'')])]),t._v(" "),a("p",[t._v("This example calibrates the channel named "),a("code",[t._v("r")]),t._v(".\nAfter this calibration, if you set the "),a("code",[t._v("r")]),t._v(" channel to 0.0, it will be remapped to 0.01 internally.\nAlso, the gamma curve for this channel will be set to 2.5.\nThis means that input values are raised to the power 2.5 internally.\nThis can be used to improve the linearity of inputs.")]),t._v(" "),a("h2",{attrs:{id:"somfy-rts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#somfy-rts"}},[t._v("#")]),t._v(" Somfy RTS")]),t._v(" "),a("p",[t._v("This actuator allows to control Somfy RTS devices.")]),t._v(" "),a("h3",{attrs:{id:"setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" Setup")]),t._v(" "),a("p",[t._v("Before the module can be used, virtual Somfy RTS remotes must be created.\nThis is done in "),a("code",[t._v("config_Somfy.h")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("SOMFY_REMOTE_NUM")]),t._v(" must be set to the number of virtual Somfy RTS remotes you want to have.\nThen create for each of the virtual Somfy RTS remotes a unique 3-byte code and add them to "),a("code",[t._v("somfyRemotes")]),t._v(".\nAfter a remote is setup, the order and codes should not be changed, else the setup process for all remotes have to be repeated.\nAdding new codes at the end of the list is no problem.\nExample of three virtual Somfy RTS remote codes:")]),t._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" uint32_t somfyRemotes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("SOMFY_REMOTE_NUM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x5184c8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xba24d0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xb77753")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Next the virtual Somfy RTS remotes must be paired with the Somfy RTS devices you want to control.\nThe next section describes how the PROG command/button of the virtual remote can be used.\nUse the manual of the device you want to control for instructions on how to pair the virtual remote with the device.")]),t._v(" "),a("h3",{attrs:{id:"commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[t._v("#")]),t._v(" Commands")]),t._v(" "),a("p",[t._v("Commands must be send to the "),a("code",[t._v("commands/MQTTtoSomfy")]),t._v(" subtopic.\nOnly json messages are supported.\nThe json message must contain two properties:")]),t._v(" "),a("ul",[a("li",[t._v("remote: the index of the remote which is used to send the command (index start at zero)")]),t._v(" "),a("li",[t._v("command: the command which should be send with the remote as string, see "),a("a",{attrs:{href:"https://github.com/Legion2/Somfy_Remote_Lib#available-commands",target:"_blank",rel:"noopener noreferrer"}},[t._v("table of command names"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v('The middle button on physical Somfy RTS Remote controls is called "My".')])]),t._v(" "),a("p",[t._v("Send PROG command with remote 0:")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_Somfy/commands/MQTTtoSomfy -m \'{"remote":0,"command":"Prog"}\'')])]),t._v(" "),a("p",[t._v("Send Up command with remote 1:")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t home/OpenMQTTGateway_Somfy/commands/MQTTtoSomfy -m \'{"remote":1,"command":"Up"}\'')])])])}),[],!1,null,null,null);e.default=o.exports}}]);