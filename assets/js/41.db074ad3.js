(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{438:function(t,e,a){"use strict";a.r(e);var s=a(42),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"system-commands-esp-only"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-commands-esp-only"}},[t._v("#")]),t._v(" System commands (ESP only)")]),t._v(" "),a("h2",{attrs:{id:"restart-the-esp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart-the-esp"}},[t._v("#")]),t._v(" Restart the ESP")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t "home/OpenMQTTGateway/commands/MQTTtoSYS/config" -m \'{"cmd":"restart"}\'')])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("With Home Assistant, this command is directly avalaible through MQTT auto discovery as a switch into the HASS OpenMQTTGateway device entities list.")])]),t._v(" "),a("h2",{attrs:{id:"erase-the-esp-settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erase-the-esp-settings"}},[t._v("#")]),t._v(" Erase the ESP settings")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t "home/OpenMQTTGateway/commands/MQTTtoSYS/config" -m \'{"cmd":"erase"}\'')])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("With Home Assistant, this command is directly avalaible through MQTT auto discovery as a switch into the HASS OpenMQTTGateway device entities list.")])]),t._v(" "),a("h2",{attrs:{id:"auto-discovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-discovery"}},[t._v("#")]),t._v(" Auto discovery")]),t._v(" "),a("p",[t._v("You can deactivate the MQTT auto discovery function, this function enable to create automaticaly devices/entities with Home Assistant convention.")]),t._v(" "),a("h3",{attrs:{id:"deactivate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deactivate"}},[t._v("#")]),t._v(" Deactivate")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t "home/OpenMQTTGateway/commands/MQTTtoSYS/config" -m \'{"discovery":false}\'')])]),t._v(" "),a("h3",{attrs:{id:"activate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activate"}},[t._v("#")]),t._v(" Activate")]),t._v(" "),a("p",[a("code",[t._v('mosquitto_pub -t "home/OpenMQTTGateway/commands/MQTTtoSYS/config" -m \'{"discovery":true}\'')])]),t._v(" "),a("p",[t._v("If you want the settings to be kept upon gateway restart, you can publish the command with the retain flag.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Auto discovery is enable by default on release binaries, on platformio (except for UNO). With Arduino IDE please read the "),a("a",{attrs:{href:"../upload/advanced-configuration#auto-discovery"}},[t._v("advanced configuration section")]),t._v(" of the documentation.")])]),t._v(" "),a("h1",{attrs:{id:"state-led-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-led-usage"}},[t._v("#")]),t._v(" State LED usage")]),t._v(" "),a("p",[t._v("The gateway can support up to 3 LED to display its operating state:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("LED_INFO\nswitched ON when network and MQTT connection are OK\n5s ON, 5s OFF when WIFI is disconnected\n1s ON, 4s OFF when MQTT is disconnected")])]),t._v(" "),a("li",[a("p",[t._v("LED_RECEIVE\nBlink for "),a("code",[t._v("TimeLedON")]),t._v(" 1s when the gateway receive a signal from one of its module so as to send to MQTT")])]),t._v(" "),a("li",[a("p",[t._v("LED_SEND\nBlink for "),a("code",[t._v("TimeLedON")]),t._v(" 1s when the gateway send a signal with one of its module from an MQTT command")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);